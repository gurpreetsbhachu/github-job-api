{"version":3,"sources":["useFetchJobs.js","Job.js","JobsPagination.js","SearchForm.js","App.js","serviceWorker.js","index.js"],"names":["ACTIONS","BASE_URL","reducer","state","action","type","loading","jobs","payload","error","hasNextPage","Job","job","useState","open","setOpen","Card","border","className","Body","Title","title","company","Subtitle","Date","created_at","toLocaleDateString","Badge","variant","location","style","wordBreak","source","how_to_apply","src","company_logo","alt","height","Text","Button","onClick","prevOpen","Collapse","in","description","JobsPagination","page","setPage","adjustPage","amount","prevPage","Pagination","Prev","Item","Ellipsis","active","Next","SearchForm","params","onParamChange","Form","Row","Group","as","Col","Label","Control","onChange","value","name","xs","Check","full_time","id","label","App","setParams","useReducer","dispatch","useEffect","cancelToken1","axios","CancelToken","get","cancelToken","token","markdown","then","res","data","catch","e","isCancel","cancelToken2","length","cancel","useFetchJobs","Container","param","target","prevParams","Alert","map","key","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.095f3f4e.chunk.js","sourcesContent":["import {useReducer, useEffect} from 'react'\r\nimport axios from 'axios'\r\n\r\nconst ACTIONS = {\r\n    MAKE_REQUEST: 'make-request',\r\n    GET_DATA: 'get-data',\r\n    ERROR: 'error',\r\n    UPDATE_HAS_NEXT_PAGE: 'update-has-next-page'\r\n}\r\n\r\n//const BASE_URL = 'https://jobs.github.com/positions.json'\r\nconst BASE_URL = 'https://jobs.github.com/positions.json'\r\n//const BASE_URL = 'https://api.gurbaninow.com/v2/banis'\r\n\r\nfunction reducer(state, action){\r\n\r\n    switch (action.type){\r\n        case ACTIONS.MAKE_REQUEST:\r\n            return { loading: true, jobs: [] }\r\n        case ACTIONS.GET_DATA:\r\n            return { ...state, loading: false, jobs: action.payload.jobs }\r\n        case ACTIONS.ERROR:\r\n            return { ...state, loading: false, error: action.payload.error, jobs: [] }\r\n        case ACTIONS.UPDATE_HAS_NEXT_PAGE:\r\n            return { ...state, hasNextPage: action.payload.hasNextPage }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default function useFetchJobs(params, page){\r\n\r\n    const [state, dispatch] = useReducer(reducer, { jobs: [], loading: true })\r\n\r\n    useEffect(() =>{\r\n        const cancelToken1 = axios.CancelToken.source()\r\n        dispatch({ type: ACTIONS.MAKE_REQUEST })\r\n        axios.get(BASE_URL, {\r\n            cancelToken: cancelToken1.token, \r\n            params: { markdown: true, page: page, ...params }\r\n        }).then(res => {\r\n            dispatch({ type: ACTIONS.GET_DATA, payload: { jobs: res.data }}) \r\n        }).catch(e => {\r\n            if (axios.isCancel(e)) return\r\n            dispatch({ type: ACTIONS.ERROR, payload: { error: e }}) \r\n        })\r\n\r\n        const cancelToken2 = axios.CancelToken.source()\r\n        axios.get(BASE_URL, {\r\n            cancelToken: cancelToken2.token, \r\n            params: { markdown: true, page: page + 1, ...params }\r\n        }).then(res => {\r\n            dispatch({ type: ACTIONS.UPDATE_HAS_NEXT_PAGE, payload: { hasNextPage: res.data.length !== 0 }}) \r\n        }).catch(e => {\r\n            if (axios.isCancel(e)) return\r\n            dispatch({ type: ACTIONS.ERROR, payload: { error: e }}) \r\n        })\r\n\r\n        return () =>{\r\n            cancelToken1.cancel()\r\n            cancelToken2.cancel()\r\n        }\r\n    }, [params, page])\r\n\r\n    return state\r\n}","import React, { useState } from 'react'\r\nimport {Card, Badge, Button, Collapse} from 'react-bootstrap'\r\nimport ReactMarkdown from 'react-markdown'\r\n\r\nexport default function Job({ job }) {\r\n    const [open, setOpen] = useState(false)\r\n    return (\r\n        <Card border=\"light\" className=\"mb-3\">\r\n            <Card.Body>\r\n            <div className=\"d-flex justify-content-between\">\r\n                <div>\r\n                    <Card.Title>\r\n                    {job.title} - <span className=\"text-muted font-weight-light\"> {job.company} </span>\r\n                    </Card.Title>\r\n                    <Card.Subtitle className=\"text-muted mb-2\">\r\n                        {new Date(job.created_at).toLocaleDateString()}\r\n                    </Card.Subtitle>\r\n                    <Badge variant=\"secondary\" className=\"mr-2\"> {job.type} </Badge>\r\n                    <Badge variant=\"secondary\"> {job.location} </Badge>\r\n                    <div style={{ wordBreak: 'break-all' }}>\r\n                        <ReactMarkdown source={job.how_to_apply}/>\r\n                    </div>\r\n                </div>\r\n                <img src={job.company_logo}  alt={job.company} className=\"d-none d-md-block\" height=\"40\"  />\r\n            </div>\r\n            <Card.Text>\r\n                <Button onClick={()=> setOpen(prevOpen => !prevOpen)} \r\n                variant=\"info\">\r\n                    {open ? 'Hide Details' : 'View Details'} \r\n                </Button> \r\n            </Card.Text>\r\n            <Collapse in={open}>\r\n            <div className=\"mt-4\">\r\n                <ReactMarkdown source={job.description} />\r\n            </div>\r\n            </Collapse>\r\n            </Card.Body>\r\n        </Card>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { Pagination } from 'react-bootstrap'\r\n\r\nexport default function JobsPagination({ page, setPage, hasNextPage }) {\r\n\r\n    function adjustPage(amount){\r\n        setPage(prevPage => prevPage + amount)\r\n    }\r\n\r\n    return (\r\n        <Pagination variant=\"info\">\r\n            {page !== 1 && <Pagination.Prev onClick={()=> adjustPage(-1)} /> } \r\n            {page !== 1 && <Pagination.Item onClick={()=> setPage(1)} >1</Pagination.Item> }\r\n            {page > 2 && <Pagination.Ellipsis/> }\r\n            {page > 2 && <Pagination.Item> {page - 1} </Pagination.Item> }\r\n            <Pagination.Item active> {page} </Pagination.Item>\r\n            {hasNextPage && <Pagination.Item onClick={()=> adjustPage(1)}> {page + 1} </Pagination.Item>}\r\n            {hasNextPage && <Pagination.Next onClick={()=> adjustPage(1)} />}\r\n        </Pagination>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport {Form, Col} from 'react-bootstrap'\r\n\r\nexport default function SearchForm({ params, onParamChange }) {\r\n    return (\r\n        <Form className=\"mb-4\">\r\n            <Form.Row className=\"align-items-end\">\r\n                <Form.Group as={Col}>\r\n                    <Form.Label>Description</Form.Label>\r\n                    <Form.Control \r\n                    onChange={onParamChange} \r\n                    value={params.description} \r\n                    name=\"description\" type=\"text\" />\r\n                </Form.Group>\r\n\r\n                <Form.Group as={Col}>\r\n                    <Form.Label>Location</Form.Label>\r\n                    <Form.Control \r\n                    onChange={onParamChange} \r\n                    value={params.location} \r\n                    name=\"location\" type=\"text\" />\r\n                </Form.Group>\r\n\r\n                <Form.Group as={Col} xs=\"auto\" className=\"ml-2\">\r\n                    <Form.Check \r\n                    onChange={onParamChange}\r\n                    value={params.full_time}\r\n                    name=\"full_time\" \r\n                    id=\"full-time\"\r\n                    label=\"Only Full Time\"\r\n                    type=\"checkbox\"\r\n                    className=\"mb-2\" />\r\n                </Form.Group>\r\n            </Form.Row>\r\n        </Form>\r\n    )\r\n}\r\n","import React, { useState } from 'react';\nimport useFetchJobs from './useFetchJobs.js';\nimport { Container, Alert } from 'react-bootstrap'\nimport Job from './Job'\nimport JobsPagination from './JobsPagination'\nimport SearchForm from './SearchForm'\n\nfunction App() {\n\n  const [params, setParams] = useState({})\n  const [page, setPage] = useState(1)\n  const{jobs, loading, error, hasNextPage} = useFetchJobs(params, page)\n\n  function handleParamChange(e){\n    const param = e.target.name\n    const value = e.target.value\n    setPage(1)\n    setParams(prevParams => {\n      return { ...prevParams, [param]: value }\n    })\n  }\n\n  return (\n    <Container className=\"my-4\">\n      <h2 className=\"mb-4\">Github Jobs - A React Project</h2>\n      <SearchForm params={params} onParamChange = {handleParamChange}/>\n      <JobsPagination page={page} setPage={setPage} hasNextPage={hasNextPage}/>\n      {loading && <Alert variant=\"light\" className=\"text-center\">Loading..</Alert> }\n      {error && <Alert variant=\"danger\" className=\"text-center\">Error. Try Refreshing.</Alert>}\n      {jobs.map(job => {\n        return <Job key={job.id} job={job}/>\n      })}\n      <JobsPagination page={page} setPage={setPage} hasNextPage={hasNextPage}/>\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}